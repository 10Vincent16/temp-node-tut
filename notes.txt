cd /user/.../.../.../... sets the working directory

node nameOfFile.js runs the code

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

You always have access to global variables
console.log(__dirname) gives you the directory of your working file
console.log(__filename) gives you the file name


modules are encupsulated code that only share a minimum (an encupsulated code), every file is a module
if you console.log(module), you will find that "module" is an object, hence to access it's export properties:
** module.exports = {john, peter } **
to access the exported module from another file:
** const names = require('./4-nameOfModule') **
require automatically runs the function inside the imported function and returns the response

OS modules
** const os = require('os') **
** const user = os.userInfo() **
** const systemUptime = os.uptime() **
** const currentOS = {
    name: os.type(),
    release: os.release(),
    totalMem: os.totalmem(),
    freeMem: os.freemem(),
} **
OS is a built in module that gives you many details of the system

path module
The Path module provides a way of working with directories and file paths
** const path = require('path') **
** const absolute = path.resolve(__dirname, 'content','subfolder','test.txt')
console.log(absolute) **


synchronus filesystem approach
**const {readFileSync, writeFileSync} = require('fs')**
or alternatively ** const fs = require('fs'), fs.readFileSync.....**
**const first = readFileSync('./content/first.txt', 'utf8')** this assigns first to the content of first.txt
**const second = readFileSync('./content/second.txt', 'utf8')**
**writeFileSync('./content/combined-sync.txt', `Here is the result: ${first}, ${second}`, {flag: 'a'})**
this creates a new file, flag A means append to exisiting conbined-sync file

asynchronus filesystem approach
**const {readFile, writeFile, write} = require('fs')**
**readFile('./content/first.txt', 'utf8', (err,result)=>{
    if (err) {
        console.log(err)
        return
    } else {
        const first = result
        readFile('./content/second.txt','utf8',(err,result)=>{
            if (err) {
                console.log(err)
                return
            } else {
                const second = result
                writeFile('./content/resultant-async.txt', `here is the result ${first}, ${second}`, (err,result)=>{
                    if (err) {
                        console.log(err)
                        return
                    } else {
                        console.log(result)
                    }
                })
            }
        })
    }
})**
Async offers advantages so that if readfile and writefile is a really long task, next tast is started before this one finishes

HTTP 
**const http = require('http')**
**const server = http.createServer((req,res)=>{
    if (req.url === '/') {
        res.end('Welcome to home page')
    } else if (req.url === '/about') {
        res.end('Welcome to about page') 
    } else {
        res.end('please return to home oage')
    }
})
server.listen(5000)**
this is so that localhost:5000/ = home page, localhost5000/about = about page

npm
go to npmjs.com for packages
local dependency (use only in this project) install: npm i <packageName>
global dependency : sudo npm install -g <packageName>
package.json stores important info about project/package, created by npm init
packagejson is helpful when sharing project with other developers

in the "scripts" of package.json,
"scripts": {
    "start": "node app.js",
    "dev": "nodemon app.js"
  }
then to run app.js, type **npm start**
or **npm run dev**, this is a constantly changing console when you change your code

removing packages
do npm uninstall bootstrap(name of file)

installing package gloabally
sudo npm install -g nodemon

event loops
**const {readFile,writeFile} = require('fs')
const util = require('util');
const readFilePromise = util.promisify(readFile)
const writeFilePromise = util.promisify(writeFile)**
so that the 2 methods returns a promise

**const start = async() =>{
    try {
        const first = await readFilePromise('./content/first.txt', 'utf8');
        const second = await readFilePromise('./content/second.txt', 'utf8');
        await writeFilePromise('./content/newly-created.txt', `this is awesome: ${first} ${second}`)
        console.log(first,second);
    } catch (error) {
        console.log(error);
    }
}**

start()

event listeners
on: listen for an event
emit: emit an event

**const eventEmitter = require('events');
const customEmitter = new eventEmitter()
customEmitter.on('response',(name,age)=>{
    console.log(`data received ${name} with ${age}`);
})
customEmitter.on('response',()=>{
    console.log(`some other logic here `);
})
customEmitter.emit('response','john',34)**

**const server = http.createServer()
server.on('request', (req,res)=>{
    res.end('Welcome)
})
server.listen(5000)**


dealing with big text files
const { writeFileSync } = require('fs')
for (let i = 0; i < 10000; i++) {
    writeFileSync('./content/big.txt', `hello world ${i}\n`, { flag:'a'})
}

const {createReadStream} = require('fs');
const stream = createReadStream('./content/big.txt', {
    highWaterMark: 90000,       //this removes the 64kb cap of each chunk and change it to 90kb
});

stream.on('data',(result)=>{
    console.log(result);
})
stream.on('error', (err)=>{
    console.log(err);
})


var http = require('http')
var fs = require('fs')
const server = http.createServer()

http.createServer((req,res)=>{
    const fileStream = fs.createReadStream('./content/big.txt', 'utf8');
    fileStream.on('open', ()=>{
        fileStream.pipe()       //this sends data in chunks
    })
    fileStream.on('error', (err)=>{
        res.end(err)
    })
})
server.listen(5000)

