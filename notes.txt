cd /user/.../.../.../... sets the working directory

node nameOfFile.js runs the code

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

You always have access to global variables
console.log(__dirname) gives you the directory of your working file
console.log(__filename) gives you the file name


modules are encupsulated code that only share a minimum (an encupsulated code), every file is a module
if you console.log(module), you will find that "module" is an object, hence to access it's export properties:
** module.exports = {john, peter } **
to access the exported module from another file:
** const names = require('./4-nameOfModule') **
require automatically runs the function inside the imported function and returns the response

OS modules
** const os = require('os') **
** const user = os.userInfo() **
** const systemUptime = os.uptime() **
** const currentOS = {
    name: os.type(),
    release: os.release(),
    totalMem: os.totalmem(),
    freeMem: os.freemem(),
} **
OS is a built in module that gives you many details of the system

path module
The Path module provides a way of working with directories and file paths
** const path = require('path') **
** const absolute = path.resolve(__dirname, 'content','subfolder','test.txt')
console.log(absolute) **


synchronus filesystem approach
**const {readFileSync, writeFileSync} = require('fs')**
or alternatively ** const fs = require('fs'), fs.readFileSync.....**
**const first = readFileSync('./content/first.txt', 'utf8')** this assigns first to the content of first.txt
**const second = readFileSync('./content/second.txt', 'utf8')**
**writeFileSync('./content/combined-sync.txt', `Here is the result: ${first}, ${second}`, {flag: 'a'})**
this creates a new file, flag A means append to exisiting conbined-sync file

asynchronus filesystem approach
**const {readFile, writeFile, write} = require('fs')**
**readFile('./content/first.txt', 'utf8', (err,result)=>{
    if (err) {
        console.log(err)
        return
    } else {
        const first = result
        readFile('./content/second.txt','utf8',(err,result)=>{
            if (err) {
                console.log(err)
                return
            } else {
                const second = result
                writeFile('./content/resultant-async.txt', `here is the result ${first}, ${second}`, (err,result)=>{
                    if (err) {
                        console.log(err)
                        return
                    } else {
                        console.log(result)
                    }
                })
            }
        })
    }
})**
Async offers advantages so that if readfile and writefile is a really long task, next tast is started before this one finishes

HTTP 
**const http = require('http')**
**const server = http.createServer((req,res)=>{
    if (req.url === '/') {
        res.end('Welcome to home page')
    } else if (req.url === '/about') {
        res.end('Welcome to about page') 
    } else {
        res.end('please return to home oage')
    }
})
server.listen(5000)**
this is so that localhost:5000/ = home page, localhost5000/about = about page

npm
go to npmjs.com for packages
local dependency (use only in this project) install: npm i <packageName>
global dependency : sudo npm install -g <packageName>
package.json stores important info about project/package, created by npm init
packagejson is helpful when sharing project with other developers


